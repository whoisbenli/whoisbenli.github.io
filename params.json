{"name":"Issue Resolution Guide","tagline":"Engineering Manual","body":"Issue Resolution Guide\r\n======================\r\n\r\nHow to deal with FAILs.\r\n\r\n## How to deal with bugs\r\n\r\n### Prevention\r\n\r\nDon't write bugs in the first place!\r\n\r\nKeep things simple. Simpler things are simpler to build and understand\r\n- simpler product design\r\n- simpler implementation architecture\r\n- simple code/logic\r\n- simpler api interfaces\r\n\r\nWhy?\r\n- simpler code is easier to reason about\r\n- clever code means hard to debug\r\n- be kind to your future self\r\n\r\nEngineering Process & Infrastructure\r\n- design, code reviews\r\n- unit tests, harnesses, automated testing\r\n\r\n### Failure Mode\r\n\r\nMake it easy to triage bugs when they eventually do happen\r\n  \r\n  - logs - make it easy to trace program state and execution\r\n  - keep intermediate info for debugging\r\n  - harnesses - for reproducing and isolating issues in controlled environment\r\n \r\n## Stages of an Issue\r\n\r\nThis standardizes the vocabulary around what state an issue is in.\r\n\r\n### Filed\r\nIssue has been documented in a ticketing system.\r\n\r\n### Reproduced\r\nYou are able to consistently reproduce the problem\r\n\r\n### Triaged\r\nYou know exactly what is going wrong and why, and you know how to fix it.\r\nThis means that we can estimate how long it would take to fix the issue AND push the patch to the production. \r\nAs usual, be conservative in your commitment date to customers if CS needs one.\r\n\r\n### Review\r\nYou have a fix waiting for review in gerrit. Link to the gerrit change.\r\n\r\n### Fixed\r\nThe change is merged.\r\n\r\n### Waiting\r\nWe are waiting on some third party to fix something. Usually just assign to Tech Services to follow up.\r\n\r\n### Resolved\r\nThe fix is in production. Mark a jira as resolved only when it has been released. This tells FQA/CS to verify the fix and communicate that fact to our customers.\r\n\r\n### Ignored\r\nIssue is ignored because it is reproducible, or it we won't fix it for whatever reason.\r\n\r\n### Test Case\r\nTest cases added\r\n\r\n### Verified\r\nStakeholder/QA verified issue is fixed and test case exists.\r\n\r\n### (Process Notes)\r\n\r\nPlease update JIRA as progress is made\r\nUpdate Immune system field, if N/A, include good reasons why!, gerrit change url\r\nInclude postmortem in the jira. Level of detail should correspond to severity and complexity of issue.\r\n\r\n## Priorities\r\n\r\n### Critical\r\nWork until fixed, no sleep, detailed postmortem required\r\n\r\n### High\r\nStop and fix\r\nIf discovered by customer, eta + daily updates\r\n\r\n### Medium\r\nSchedule - e.g. 1 per week. Put it in the plan.\r\n\r\n## What you should know or ask about every issue\r\n\r\n### Source\r\nHow did we find out about the issue?\r\n- automated tests, staging, qa, uat, internal users, customer report?\r\n\r\n### Triage Priority\r\nWhat's the initial priority and criticality?\r\nIs it severe enough to consider a rollback if caused by a recent release?\r\n\r\n### Account\r\nWhat is the errant behavior?\r\nWhat are the steps taken to reproduce it?\r\nWas there an active modification of the running system? What was the timing and sequence of events?\r\n- Deployments, configuration, migrations, etc.\r\nWhat is the expected behavior?\r\n\r\n### Scope\r\nHow does it impact the customer? Which customers?\r\nWhat parts of the product are affected?\r\nCould this be more of a product design bug?\r\n\r\n### Reproduction\r\nBe able to deterministically reproduce the issue\r\nIf the issue was found in a prerelease version, is it also found in production?\r\nMake is as easy as possible to reproduce the issue (configure test ads, harnesses, etc)\r\n- This way, colleagues downstream don't have to duplicate work.\r\n\r\n### Triage\r\nWhen was the issue introduced? By who? Who else was involved?\r\nUnder what circumstances does it happen, or not happen?\r\n\r\nIsolate the issue - what is the smallest case (use harness/unit tests) that reproduces the issue?\r\nFigure out projects affected - client vs server vs console vs db, etc\r\nEliminate causes by examining scope across dimensions - pubs, ads, integration types, ad types, client platform types\r\nCould it be caused by an external party? Get proof if so, so Tech Services can communicate.\r\n\r\nWhat part of the code is causing the issue and why? Use debugger, logs\r\n\r\n*In light of this new information, has the priority changed?\r\n\r\n### Fix\r\nWhat needs to be done to fix the issue? How long will it take? What can we commit to?\r\nCould it potentially introduce other problems? How risky is it?\r\nIs it a symptom of a larger design issue? Should that be fixed as well?\r\nCould the same class of bugs be present elsewhere? Should a more thorough code audit be performed?\r\nCreate an automated test case to prevent regressions.\r\n\r\n### Postmortem\r\nWas the issue verified to be fixed by the stakeholders?\r\nWhy was the issue not caught by our product development process?\r\nIs it the result of a common practice that should be discontinued?\r\nDoes everyone know what to do to prevent this from happening again?\r\nDo we need better infrastructure to identify bugs?\r\n\r\n### Follow up Actions\r\nHow do we change our product development process to ensure that this class of issues do not happen again?\r\n- prd, design review, implementation, unit tests, integration tests, code review, qa, deployment\r\n\r\nIf longer term effort is required to change the process or introduce new infrastructure, What is being done in the meantime?\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}